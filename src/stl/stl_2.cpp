/*
 * Итерторы
 * ...
 * это сущность которыя нужна/используют для взаимодействия с элементами в STL (vector, list, map ...)
 * поскольку в большинстве контейнеров STL оператор [] - не перегружен.
 * поведение немного напоминаем умные указатели.
 * поддерживает синтаксис арифметики указателей (не всеми типами итераторов).
 * ---
 * ... ::const_reverse_iterator - итерация коллекции с конца к началу.  + "r"
 * ... ::reverse_iterator - итерация коллекции с конца к началу.        + "rw"
 * ... ::const_iterator - итерация коллекции с начала до конца.         + "r"
 * ... ::iterator -  итерация коллекции с начала до конца.              + "rw"

 */

#include <iostream>
#include <vector>

int main() {
  std::vector<int> v1 = {3, 8, 34, 63, 44};

  std::vector<int>::iterator it1;
  std::vector<int>::const_iterator it2;
  std::vector<int>::reverse_iterator it3;
  std::vector<int>::const_reverse_iterator it4;

  it1 = v1.begin();    // Итератор теперь указывает на 0 (первый) элемент вектора = 3

  std::cout << *it1 << std::endl;  // Сам итератор - это обьект...
                                   // чтобы получить/изменить данные нужно писать *it1 ("*" перегружен)
  *it1 = 987;   // v1 = {987, 8, 34, 63, 44}
  it1++;        // Переходим на след. элемент в коллекции.  = 8
  it1 += 2;     // Сдвигаемся на 2 элемента вправо.         = 63
  --it1;        // Сдвигаемся на 1 элемент влево.           = 34

  // В случае если итератор не поддерживает арифметику указателей
  std::advance(it1, 2);   // Сдвигаемся на 2 элемент вправо.    = 44

  // Добавление элемента по итератору (сейчас итератор на 5 элементе)
  v1.insert(it1, 101);      // v1 = {987, 8, 34, 63, 101, 44}

  it1 = v1.begin();
  // Удаление элемента по итератору (сейчас итератор на 5 элементе)
  v1.erase(it1);      // v1 = {8, 34, 63, 101, 44}

  for (const auto &i :v1)
    std::cout << i << " ";

  return 0;
}
