/*
 * Array
 * ... реализация слегка прокаченого обычного массива [С++11 only] в STL
 * может быть полезно тем что есть метод "at" - можно отлавливать исключения.
 *
 * --- Операции ---
 * -> at()            - получить элемент по индексу (== arr[i]). Если выходим за границы - получаем exception.
 *                      работает медленнее чем [] поскольку проверяет выход за границу.
 * -> front()         - получить первый элемент.
 * -> back()          - получить последний элемент.
 * -> empty()         - проверка есть ли элементы в контейнере.
 * -> size()          - количество элементов в контейнера.
 * -> fill()          - заполнение массива конкретными значениями.
 * -------------------------------------------------------------------------------
 * ---
 * -> begin()         - возвращает итератор на первый элемент коллекции.
 * -> cbegin()        - возвращает const итератор на первый элемент коллекции.
 * -> rbegin()  C++11 - возвращает reverse итератор на первый элемент коллекции.
 * -> cregin()  C++11 - возвращает const reverse итератор на первый элемент коллекции.
 * ---
 * -> end()           - возвращает итератор на след. элемент который идет после последнего элемента в коллекции.
 * -> cend()    C++11 - возвращает const итератор на след. элемент который идет после последнего элемента в коллекции.
 * -> rend()          - возвращает reverse итератор на след. элемент который идет после последнего элемента в коллекции.
 * -> crend()   C++11 - возвращает const reverse итератор на след. элемент который идет после последнего элемента в коллекции.
 */

#include <iostream>
#include <array

int main(){
  std::array<int, 10> arr = {42, 10, 92, 4};
  std::array<int, 10> arr1;


  return 0;
}
